# -*- coding: utf-8 -*-
"""OOS_Carriers_Coordinates.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16i6-or2FerUwRiH6ILXvmvvjBh376_p9

**These Notebooks are an ongoing Project to determine 'Chamleon Trucking' Companies in The United States. This Page contain Data for Out of Service Carriers(Trucking companies that have shut down).For More info on Chameleon Trucking,See the following Link https://www.atlantainjurylawblog.com/uncategorized/what-is-a-chameleon-trucking-company-and-how-does-it-keep-doing-dangerous-stuff.html**

***NOTE- After plotting on Maps,the Geocoding did not properly match up for some datapoints,this was probably due to imperfect 'Address' formatting for the geocoder.arcgis('Address') function which will be corrected later,the analysis is the important part for now***
"""

import sqlalchemy
import pymysql
import numpy as np
import pandas as pd
import re
import matplotlib.pyplot as plt
import seaborn as sns
from mpl_toolkits.basemap import Basemap

"""**Load OOS Coordinates from MySQL**"""

# Connect to MySQL Engine 
engine = sqlalchemy.create_engine('mysql+pymysql://root:*******@localhost:****/route_risk')

# # Get the OOS_Carriers.sql
OS_Carr_Df = pd.read_sql_table('oos_company_coordinates',engine)
# Column Names
OS_Carr_Df.rename(columns={ 'usdot':'USDOT', 'legal_name':"LEGAL_NAME", 'dba_name':"DBA_NAME",'state':'STATE', 'lat':'LAT','lon':'LON' }, inplace=True)
OS_Carr_Df['USDOT'] = OS_Carr_Df['USDOT'].astype(int)
OS_Carr_Df['LEGAL_NAME'] = OS_Carr_Df['LEGAL_NAME'].astype(str)
OS_Carr_Df = OS_Carr_Df.sort_index()

# View Head
print(OS_Carr_Df.head(5))
# View Shape
print(OS_Carr_Df.shape)
# Drop Duplicates
OS_Carr_Df.drop_duplicates(keep=False,inplace=True) 
# View Shape
print(OS_Carr_Df.shape)

"""**Load OOS Carriers without coordinates from MySQL**"""

# Connect to MySQL Engine 
engine = sqlalchemy.create_engine('mysql+pymysql://root:*******@localhost:******/route_risk')

# # Get the OOS_Carriers.sql
oos_c_df = pd.read_sql_table('out_of_service_carriers',engine)
# Column Names
oos_c_df.columns
oos_c_df.rename(columns={ 'usdot':'USDOT', 'legal_name':"LEGAL_NAME", 'dba_name':"DBA_NAME",'zip_code':
                         'ZIP_CODE','state':'STATE', 'city':'CITY','street':'STREET', 'oos_reason':
                         'OOS_REASON', 'oos_date':'OOS_DATE', 'oos_status':'OOS_STATUS'}, inplace=True)
oos_c_df['USDOT'] = oos_c_df['USDOT'].astype(int)
oos_c_df['LEGAL_NAME'] = oos_c_df['LEGAL_NAME'].astype(str)
oos_c_df= oos_c_df.sort_index()

# View Head
print(oos_c_df.head(5))
# View Shape
print(oos_c_df.shape)
# Drop Duplicates
oos_c_df.drop_duplicates(keep=False,inplace=True) 
# View Shape
print(oos_c_df.shape)

# Full outer join based on matching 'USDOT','LEGAL_NAME', 'DBA_NAME', 'STATE'
Oos_Merge = pd.merge(oos_c_df, OS_Carr_Df, on = ['USDOT','LEGAL_NAME', 'DBA_NAME', 'STATE'], how = 'outer')
Oos_Merge.shape

"""**Lets Check the number of carriers that shut down multiple times**"""

print(len(Oos_Merge[Oos_Merge['USDOT'].duplicated()]),"carriers shut down multiple times")

# View these multiple shutdown carriers
Oos_Merge_MS = Oos_Merge[Oos_Merge['USDOT'].duplicated()]

"""**OOS C Missing Coordinates We still Need to Find**"""

# Checking OOS C Missing Coordinates We still Need to Find
Oos_Missing = Oos_Merge_MS[Oos_Merge_MS['LAT'].isnull()]
print(len(Oos_Missing))

#Save as Excel

#Oos_Missing.to_csv("C:/Users/Rae-Djamaal/Anaconda3/Lib/site-packages/Chameleon_Proj/Oos_Missing.csv", index = False)

# Clean DF without Missing coordinates
Oos_Merge_MM = pd.concat([Oos_Merge, Oos_Missing]).drop_duplicates(keep=False)
# Reset index
Oos_Merge_MM.reset_index(drop=True, inplace=True)

"""# **Data Visualization**-Bar Chart"""

# Plot the count By State
plt.figure(figsize=(22,18))

sns.countplot(x="STATE", data = Oos_Merge_MM)
plt.suptitle('No of OOS Carriers By State',fontsize=36)
plt.tight_layout()
plt.show()

"""**Vizualization above shows 'States' have some inncorrect values-Now filter these out**"""

# Locate incorrect States
M2 = []
for i in range(0,len(Oos_Merge_MM)):
  if len(Oos_Merge_MM.loc[i,'STATE']) != 2:
    M2.append(Oos_Merge_MM.loc[i])
State_off_Df = pd.DataFrame(M2)
print(State_off_Df.head(10))

#Filter it out
keys = list(State_off_Df.columns.values)
i1 = Oos_Merge_MM.set_index(keys).index
i2 = State_off_Df.set_index(keys).index
Cl_OS_Carr_Df = Oos_Merge_MM[~i1.isin(i2)]
print(Cl_OS_Carr_Df.shape)

# Cl_OS_Carr_Df.to_csv('C:/Users/###########/Anaconda3/Lib/site-packages/Chameleon_Proj/CL_OS_Coords.csv', index = False)

"""**Plot Below with States Cleaned**"""

#New Count By State
plt.figure(figsize=(22,18))

sns.countplot(x="STATE", data = Cl_OS_Carr_Df)
plt.suptitle('No of OOS Carriers By State',fontsize=36)
plt.tight_layout()
plt.show()

"""**Lets plot Texas for Example**"""

fig = plt.figure(figsize=(12, 15))

# Create the Basemap object
m = Basemap(llcrnrlon=-119,llcrnrlat=22,urcrnrlon=-64,urcrnrlat=49,
        projection='lcc',lat_1=33,lat_2=45,lon_0=-95)
m.etopo(scale=0.9, alpha=0.9)

Cl_OS_Carr_T = Cl_OS_Carr_Df[Cl_OS_Carr_Df['STATE']=='TX']
Cl_OS_Carr_T["LAT"] = pd.to_numeric(Cl_OS_Carr_Df["LAT"])
Cl_OS_Carr_T["LON"] = pd.to_numeric(Cl_OS_Carr_Df["LON"])

#print(IS_merge_Coords_TX.shape)
lon = Cl_OS_Carr_T["LON"].tolist()
lat = Cl_OS_Carr_T["LAT"].tolist()

x, y = m(lon, lat )
m.scatter(x, y, marker='D',color='m')
# Title
plt.title('Plot of OOS Carriers in Texas',fontsize=25)
plt.tight_layout()
plt.show()

"""**Plot Florida for Example**"""

fig = plt.figure(figsize=(12, 15))

m = Basemap(llcrnrlon=-119,llcrnrlat=22,urcrnrlon=-64,urcrnrlat=49,
        projection='lcc',lat_1=33,lat_2=45,lon_0=-95)
m.etopo(scale=0.9, alpha=0.9)


Cl_OS_Carr_Fl = Cl_OS_Carr_Df[Cl_OS_Carr_Df['STATE']=="FL"]
Cl_OS_Carr_Fl["LAT"] = pd.to_numeric(Cl_OS_Carr_Df["LAT"])
Cl_OS_Carr_Fl["LON"] = pd.to_numeric(Cl_OS_Carr_Df["LON"])

#print(IS_merge_Coords_TX.shape)
lon = Cl_OS_Carr_Fl["LON"].tolist()
lat = Cl_OS_Carr_Fl["LAT"].tolist()

x, y = m(lon, lat )
m.scatter(x, y, marker='D',color='m')
# Title
plt.title('Plot of OOS Carriers in Florida',fontsize=25)
plt.tight_layout()

plt.show()

"""**Tijuana, Mexico**"""

#len(Oos_Merge_MM[Oos_Merge_MM['STATE']=='TA'])
fig = plt.figure(figsize=(12, 15))

m = Basemap(llcrnrlon=-109,llcrnrlat=12,urcrnrlon=-54,urcrnrlat=39,
        projection='lcc',lat_1=33,lat_2=45,lon_0=-95)
m.etopo(scale=0.9, alpha=0.9)


Cl_OS_Carr_TA = Cl_OS_Carr_Df[Cl_OS_Carr_Df['STATE']=="TA"]
Cl_OS_Carr_TA["LAT"] = pd.to_numeric(Cl_OS_Carr_Df["LAT"])
Cl_OS_Carr_TA["LON"] = pd.to_numeric(Cl_OS_Carr_Df["LON"])

#print(IS_merge_Coords_TX.shape)
lon = Cl_OS_Carr_TA["LON"].tolist()
lat = Cl_OS_Carr_TA["LAT"].tolist()
x, y = m(lon, lat )
m.scatter(x, y, marker='D',color='m')

# Title
plt.title('Plot of OOS Carriers in Tijuana, Mexico',fontsize=25)
plt.tight_layout()
plt.show()