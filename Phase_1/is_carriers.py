# -*- coding: utf-8 -*-
"""Copy of IS_Carriers_Final.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11Z9f7EfzW8othmDE0WrmpvYdOFofmvKa
"""

# std modules
import os
import numpy as np
import pandas as pd
import pickle

# Geographic modules
import geocoder
import geopandas

#Vizualisations Modules
import matplotlib.pyplot as plt
import seaborn as sns
from mpl_toolkits.basemap import Basemap

# user defined MySQL modules
from SQL_Mods.sql_mods import MySQL_Operations

"""
Connect to MySQL Server
"""
# Call the instance MySQL Class
db_call_1 = MySQL_Operations('enter_your_user','enter_your_password','enter_your_host','enter_your_database')

# check the engine
print(db_call_1.Engine_Connection()[0])

# check the connection
print(db_call_1.Database_Connection()[0])

# get the connection object
connection = db_call_1.Database_Connection()[1]

# Create the cursor
cursor = connection.cursor(prepared=True)

# Select the sql table
sql_select_Query = "select * from is_company_coordinates"

# Execute the cursor
cursor.execute(sql_select_Query)
records = cursor.fetchall()
print("Total number of rows in crash_company is: ", cursor.rowcount)

# get the engine object
engine = db_call_1.Database_Connection()[1]

# Fetch the is_company_coordinates table and convert table to dataframe 
IS_Coords = pd.read_sql('SELECT * FROM is_company_coordinates', con=engine)

# Fetch the in_service_carriers table and convert table to dataframe 
IS_Carrier_Names = pd.read_sql('SELECT * FROM in_service_carriers', con=engine)

# close cursor
cursor.close()

# Merged both dataframes so we have all information for the IS Companies
IS_Merged = pd.merge(IS_Carrier_Names,IS_Coords, on = ['USDOT'], how = 'inner')
print(IS_Merged.shape)

# Rename columns
IS_Merged.rename(columns={'legal_name': "LEGAL_NAME", 'dba_name': "dba_name"
                  ,'ENT_PHY_STATE': "STATE", 'ENT_PHY_CITY': "CITY",'ENT_PHY_ADDRESS': "FULL_ADDRESS"}, inplace=True)

#Save the IS_Merged to MySQL Server
engine1 = create_engine('mysql+mysqlconnector://enter_your_user:enter_your_password@enter_your_host/enter_your_database')
IS_Merged.to_sql('IS_Geocord_With_Address', con = engine1, if_exists='replace', index=False)

# Verifiy the table is saved
cursor = connection.cursor(prepared=True)
cursor.execute("SHOW TABLES") 
records = cursor.fetchmany(3)
print(records)

"""
These are more of the coordinates we still have to geocode. 
We will save this to the SQL database for future
"""

# # Extract rows in IS_Carrier_Names that do not exist in IS_Merged
# Coords_to_Find = pd.merge(IS_Carrier_Names, IS_Merged, how='left', indicator=True) \
#                   .query("_merge == 'left_only'") \
#                     .drop('_merge',1)
#
# # merge adrres componentsto one column to get a full address
# Coords_to_Find['FULL_ADDRESS'] = Coords_to_Find[Coords_to_Find.columns[3:]].apply(
#                                   lambda x: ' '.join(x.dropna().astype(str)),
#                                     axis=1)
#
# # First 200K
# Coords_to_Find = Coords_to_Find.loc[0:250000,['USDOT','FULL_ADDRESS']]
# Coords_to_Find.shape
#
# # Save the Coords_to_Find to MySQL Server
# Coords_to_Find.to_sql('IS_Coords_to_Geocode', engine, if_exists='replace', index=False)
#
# Verifiy the table is saved
# cursor = connection.cursor(prepared=True)
# cursor.execute("SHOW TABLES") 
# records = cursor.fetchmany(3)
# records