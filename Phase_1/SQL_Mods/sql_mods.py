# -*- coding: utf-8 -*-
"""SQL_Mods

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VYFmZHO9rp-SFebMEcxT_HztZQuO_Dg5
"""

from sqlalchemy import create_engine
import mysql.connector

class MySQL_Operations:

    """
    MySQL_Operations class performs repeated
    operations of importing data from the server
    """

  def __init__(self,user,password,host,database):
    self.user = user
    self.password = password
    self.host = host
    self.database = database


  def Engine_Connection(self):
    """
    Engine_Connection ensures that the engine connection is established.
    It returns a the engine object and text confirmation if connection is
    established.It returns a failed text if connection is not established
    """
    try:
      # Engine Connection
      engine = create_engine('mysql+mysqlconnector://{}:{}@{}/{}'.format(self.user,self.password,self.host,self.database))
      return['Engine created', engine]
    except engine.closed():
      return print("Failed to create engine")


  def Database_Connection(self):
    # Database connection
    """
    Database_Connection ensures that the database connection is established.
    It returns a the connection object and text confirmation if connection is
    established.It returns a failed text if connection is not established
    """
    try:   
      # Connect to DB- mysql.connector
      connection = mysql.connector.connect(
                  user=self.user,
                  password=self.password,
                  host=self.host,
                  database=self.database
                  )
      # Create cursor
      cursor = connection.cursor(prepared=True)
    except mysql.connector.Error as error:
          return print("Failed to execute stored procedure: {}".format(error))
      
    finally:
        if (connection.is_connected()):
            cursor.close()
            return ["Connection Established", connection]
